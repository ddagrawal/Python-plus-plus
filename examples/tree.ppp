#include "ppp"
exec(open("ppp").read())

class Node:
	members(""" ",
		name, left, right,
	" """)
	
	def to_string(args):
		var
		out = self.name + "\n";
		if (self.left.valid()):
			out += self.left.to_string();
		end
		if (self.right.valid()):
			out += self.right.to_string();
		end
		return out;
	end
end_class

class NullNode:
	members(""" ",
	" """)
	def to_string(args):
		pass
	end
end_class

/*
struct Bar1;
decltype(make(Bar, *(Bar1*)(nullptr), 1, 1)) Bar1;
//decltype(( Bar < decltype(1), decltype(1), decltype(( Bar1 < decltype(1), decltype(1) >::__Wrapper__( new Bar1 < decltype(1), decltype(1) >::__Data__(1, 1)))) >::__Wrapper__( new Bar < decltype(1), decltype(1), decltype(( Bar1 < decltype(1), decltype(1) >::__Wrapper__( new Bar1 < decltype(1), decltype(1) >::__Data__(1, 1)))) >::__Data__(( Bar1 < decltype(1), decltype(1) >::__Wrapper__( new Bar1 < decltype(1), decltype(1) >::__Data__(1, 1))), 1, 1)))) Bar1;
*/

def run(args):
	print("Hello World!");
	
	var
	root = make(Node, "root",
		make(NullNode),
		make(NullNode)
		//make(Node, "left 0", make_null(NullNode), make_null(NullNode)),
		//make(Node, "right 0", make_null(NullNode), make_null(NullNode))
	);
	
	//var
	//a = make(Bar, (Bar<Bar1, int, int>::Wrapper()), 8, 9);
	
	//auto a = ( Bar < decltype(9), decltype(8), decltype((Bar<Bar1, int, int>::Wrapper())) >::__Wrapper__( new Bar < decltype(9), decltype(8), decltype((Bar<Bar1, int, int>::Wrapper())) >::__Data__((Bar<Bar1, int, int>::Wrapper()), 8, 9)));

end

end_program()
