
#define comment ///  Python++
#define comment /// ==========

#define comment /// Python++ is a framework for cross language development
#define comment /// Specifically, it's a set of guidelines and boilerplate that allows you to easily write code valid in both Python3 and C++14
#define comment /// More info at https://github.com/wmww/Python-plus-plus

#define comment /// this file can be copied to the top of your Python++ source, or placed alongside it with this at the top:
#define comment ///	1. |
#define comment ///	2. |	#include "ppp.ppp"
#define comment ///	3. |	exec(open("ppp.ppp").read())
#define comment ///	4. |

#define ccp const char *
#define dummy_str_0 ccp dummy_str_0
dummy_str_0 = """ ";

#include <iostream>
#include <vector>
#include <memory>

struct IntIter
{
	int val;
	bool operator!=(const IntIter& other) const { return val != other.val; }
	int operator*() const { return val; }
	const IntIter& operator++ () { ++val; return *this; }
};

struct IntRange
{
	int low = 0, heigh = 0;
	IntRange(int heighIn) { low = 0; heigh = (0 <= heighIn ? heighIn : 0); }
	IntRange(int lowIn, int heighIn) { low = lowIn; heigh = (lowIn <= heighIn ? heighIn : lowIn); }
	IntIter begin () const { return IntIter{low}; }
	IntIter end () const { return IntIter{heigh}; }
};

#define comment /// macro helpers

#define CAT(a, b) CAT_(a, b)
#define CAT_(a, b) a##_##b
#define ARG_COUNT(...)ARG_COUNT_INTENAL(dummy, __VA_ARGS__, 48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
#define ARG_COUNT_INTENAL(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,N,...) N
#define COMMA ,

#define comment /// mscl

#define print(arg) {std::cout << arg << std::endl;}
#define var auto
#define null 0
#define END(dummy) int main(int argc, char ** argv) {run(0); return 0;}


#define comment /// block

//#define blockBeforeColonMacro {class LocalDummyClass{const int a; LocalDummyClass()
#define blockBeforeColonMacro { CAT(dummyLabel, __LINE__)
#define do a(0){}};
#define check(in) (in) blockBeforeColonMacro
#define if(condition) if (condition) blockBeforeColonMacro
#define elif } else if
#define always (true) blockBeforeColonMacro
#define while(condition) while (condition) blockBeforeColonMacro
#define for for (auto
#define in(a) : a) blockBeforeColonMacro
#define range(...) IntRange(__VA_ARGS__)
#define end };

#define comment /// for range



#define comment /// function

#define def template< \
	typename T_1  = void, \
	typename T_2  = void, \
	typename T_3  = void, \
	typename T_4  = void, \
	typename T_5  = void, \
	typename T_6  = void, \
	typename T_7  = void, \
	typename T_8  = void, \
	typename T_9  = void, \
	typename T_10 = void, \
	typename T_11 = void, \
	typename T_12 = void> auto
#define _ 0

#define comment //naming is because the macro name appears in a common error message

#define args FUNC_ARGS(
#define FUNC_ARGS(...) int dummy_arg CAT(CAT(FUNC, ARG_COUNT(__VA_ARGS__)), ARGS)(__VA_ARGS__)) blockBeforeColonMacro
#define FUNC_1_ARGS(empty)
#define FUNC_2_ARGS(empty, arg) , T_1 arg
#define FUNC_3_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)
#define FUNC_4_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)
#define FUNC_5_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)
#define FUNC_6_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)
#define FUNC_7_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)
#define FUNC_8_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)
#define FUNC_9_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)
#define FUNC_10_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)
#define FUNC_11_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)
#define FUNC_12_ARGS(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(CAT(FUNC, ARG_COUNT(,__VA_ARGS__)), ARGS)(,__VA_ARGS__)

#define comment /// array

#define Array(type) std::vector<decltype(type)>();
#define len(ary) ary.size()
#define append push_back


#define comment /// class

class EmptyClass {};

#define class template< \
	typename M_2  = EmptyClass, \
	typename M_3  = EmptyClass, \
	typename M_4  = EmptyClass, \
	typename M_5  = EmptyClass> class

#define CLASS_CONSTRUCT_A_2(empty, end)
#define CLASS_CONSTRUCT_A_3(empty, name, end) M_2 arg_2
#define CLASS_CONSTRUCT_A_4(empty, name, ...) CAT(M, ARG_COUNT(,__VA_ARGS__)) CAT(arg, ARG_COUNT(,__VA_ARGS__)), CAT(CLASS_CONSTRUCT_A, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define CLASS_CONSTRUCT_A_5(empty, name, ...) CAT(M, ARG_COUNT(,__VA_ARGS__)) CAT(arg, ARG_COUNT(,__VA_ARGS__)), CAT(CLASS_CONSTRUCT_A, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define CLASS_CONSTRUCT_A_6(empty, name, ...) CAT(M, ARG_COUNT(,__VA_ARGS__)) CAT(arg, ARG_COUNT(,__VA_ARGS__)), CAT(CLASS_CONSTRUCT_A, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define CLASS_CONSTRUCT_A_7(empty, name, ...) CAT(M, ARG_COUNT(,__VA_ARGS__)) CAT(arg, ARG_COUNT(,__VA_ARGS__)), CAT(CLASS_CONSTRUCT_A, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)

#define CLASS_CONSTRUCT_B_2(empty, end)
#define CLASS_CONSTRUCT_B_3(empty, name, end) name = arg_2;
#define CLASS_CONSTRUCT_B_4(empty, name, ...) name = CAT(arg, ARG_COUNT(,__VA_ARGS__)); CAT(CLASS_CONSTRUCT_B, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define CLASS_CONSTRUCT_B_5(empty, name, ...) name = CAT(arg, ARG_COUNT(,__VA_ARGS__)); CAT(CLASS_CONSTRUCT_B, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define CLASS_CONSTRUCT_B_6(empty, name, ...) name = CAT(arg, ARG_COUNT(,__VA_ARGS__)); CAT(CLASS_CONSTRUCT_B, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define CLASS_CONSTRUCT_B_7(empty, name, ...) name = CAT(arg, ARG_COUNT(,__VA_ARGS__)); CAT(CLASS_CONSTRUCT_B, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)

#define CLASS_DATA_2(empty, end)
#define CLASS_DATA_3(empty, name, end) M_2 name;
#define CLASS_DATA_4(empty, name, ...) CAT(M, ARG_COUNT(,__VA_ARGS__)) name; CAT(CLASS_DATA, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define CLASS_DATA_5(empty, name, ...) CAT(M, ARG_COUNT(,__VA_ARGS__)) name; CAT(CLASS_DATA, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define CLASS_DATA_6(empty, name, ...) CAT(M, ARG_COUNT(,__VA_ARGS__)) name; CAT(CLASS_DATA, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define CLASS_DATA_7(empty, name, ...) CAT(M, ARG_COUNT(,__VA_ARGS__)) name; CAT(CLASS_DATA, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)

#define comment // must use constructor because brace initialization doesn't work if the class has a base class
#define members(a, ...) \
	EmptyClass { \
	public: \
		CAT(CLASS_DATA, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__) \
		void setup(CAT(CLASS_CONSTRUCT_A, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)) { \
			CAT(CLASS_CONSTRUCT_B, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__) \
		}

#define margs METHOD_ARGS(
#define METHOD_ARGS(...) CAT(METHOD_ARGS, ARG_COUNT(__VA_ARGS__))(__VA_ARGS__)) blockBeforeColonMacro
#define METHOD_ARGS_1(empty)
#define METHOD_ARGS_2(empty, arg) T_1 arg
#define METHOD_ARGS_3(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define METHOD_ARGS_4(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define METHOD_ARGS_5(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define METHOD_ARGS_6(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define METHOD_ARGS_7(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define METHOD_ARGS_8(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define METHOD_ARGS_9(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define METHOD_ARGS_10(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define METHOD_ARGS_11(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)
#define METHOD_ARGS_12(empty, arg, ...) , CAT(T, ARG_COUNT(,__VA_ARGS__)) arg CAT(METHOD_ARGS, ARG_COUNT(,__VA_ARGS__))(,__VA_ARGS__)

#define mtop() auto& self = *this;

template<typename T>
struct WrapperClass
{
public:
	std::shared_ptr<T> ptr;
	T o;
	
	WrapperClass(): ptr(std::make_shared<T>()), o(*ptr) {}
};

#define MAKE_TEMPLATE_1(empty)
#define MAKE_TEMPLATE_2(empty, arg) decltype(arg)
#define MAKE_TEMPLATE_3(empty, arg, ...) decltype(arg), CAT(MAKE_TEMPLATE, ARG_COUNT(, __VA_ARGS__))(,__VA_ARGS__)
#define MAKE_TEMPLATE_4(empty, arg, ...) decltype(arg), CAT(MAKE_TEMPLATE, ARG_COUNT(, __VA_ARGS__))(,__VA_ARGS__)
#define MAKE_TEMPLATE_5(empty, arg, ...) decltype(arg), CAT(MAKE_TEMPLATE, ARG_COUNT(, __VA_ARGS__))(,__VA_ARGS__)
#define MAKE_TEMPLATE_6(empty, arg, ...) decltype(arg), CAT(MAKE_TEMPLATE, ARG_COUNT(, __VA_ARGS__))(,__VA_ARGS__)

#define CLASS_TYPE(class_name, ...) class_name < CAT(MAKE_TEMPLATE, ARG_COUNT(, __VA_ARGS__))(,__VA_ARGS__) >

#define make(class_name, ...) [&]() -> auto { WrapperClass <CLASS_TYPE(class_name, __VA_ARGS__)> ret; ret.o.setup(__VA_ARGS__); return ret; }()
//#define make(class_name, ...) WrapperClass < int > ()

#define exec(dummy)

/* """
import inspect
var = None
def end_program():
	blacklist = {
		'end_program': None,
		'Array': None,
		'members': None,
		'mtop': None,
		'make': None,
		}
	mods = []
	for key, val in globals().items():
		if inspect.isfunction(val):
			if not key in blacklist:
				def make_func(val):
					def func(*args):
						return val(None, *args)
					return func
				a = (key, make_func(val))
				mods.append(a)
	for mod in mods:
		globals()[mod[0]] = mod[1]
	globals()['run']()
def Array(dummy): return []
class WrapperClass: pass
def members(member_vars):
	inspect.stack()[1].frame.f_locals['member_vars'] = [i.strip().strip(',') for i in member_vars.split()][1:-1]
def mtop():
	#inspect.stack()[1].frame.f_locals['self'] = inspect.stack()[1].frame.f_locals['margs']
	#print(inspect.stack()[1].frame.f_locals['self'])
	global self
	self = inspect.stack()[1].frame.f_locals['margs']
def make(class_type, *argv):
	ret = WrapperClass()
	o = class_type()
	for i in range(len(argv)):
		o.__dict__[class_type.member_vars[i]] = argv[i]
	ret.o = o
	return ret
self = None
true = True
false = False
always = True
null = None
_ = None
end = None
""" */
ccp dummy_str_3 = " """;





